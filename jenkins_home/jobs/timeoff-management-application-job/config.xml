<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.39">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.7.0"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.7.0">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>NODE_APP_PORT</name>
          <description></description>
          <defaultValue>3000</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>APP_CONTAINER_NAME</name>
          <description></description>
          <defaultValue>timeoff-mngmt-app</defaultValue>
          <trim>false</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.80">
    <script>node {
    def container
    
    stage(&apos;Fetching&apos;) {
      git &apos;http://git-server:3000/root/timeoff-management-application.git&apos;
      shortCommit = sh(returnStdout: true, script: &apos;git rev-parse --short HEAD&apos;).trim()
    }
    
    stage(&apos;Build image&apos;) {
      container = docker.build(&apos;${APP_CONTAINER_NAME}&apos;)
    }
    
    
    stage(&apos;Push image&apos;) {
      //The port that I use here is the one that I configured in the docker 
      //repository in nexus3
      docker.withRegistry(&apos;http://localhost:8100&apos;, &apos;nexus3-repository&apos;) {
        container.push(&quot;${shortCommit}&quot;)
        container.push(&apos;latest&apos;)
      }
    }
    
    stage(&apos;Deploy image&apos;) {
        //This deletes any existing container to deploy a new one with latest image
        sh &apos;docker ps -f name=${APP_CONTAINER_NAME} -q | xargs --no-run-if-empty docker container stop&apos;
        sh &apos;docker container ls -a -fname=${APP_CONTAINER_NAME} -q | xargs -r docker container rm&apos;
        sh &apos;docker container prune -f&apos;
        container.run(&quot;-p ${NODE_APP_PORT}:${NODE_APP_PORT} --name ${APP_CONTAINER_NAME}&quot;,&quot;npm start&quot;)
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>